 class Heap:
    def __init__(self):
        self.items = []
        self.size = 0
    def getLeftChildIndex(self, parentIndex):
      return parentIndex * 2 + 1
    
    def getRightChildIndex(self, parentIndex):
      return parentIndex * 2 + 2
        
    def getParentIndex(self, childIndex):
      return (childIndex - 1)//2

    def hasLeftChild(self, parentIndex):
      return self.getLeftChildIndex(parentIndex) < self.size
        
    def hasRightChild(self, parentIndex):
      return self.getRightChildIndex(parentIndex) < self.size
        
    def hasParent(self, childIndex):
      return self.getParentIndex(childIndex) >= 0
        
    def leftChild(self, parentIndex):
      return self.items[self.getLeftChildIndex(parentIndex)][0]
        
    def rightChild(self, parentIndex):
      return self.items[self.getRightChildIndex(parentIndex)][0]
    
    def parent(self, childIndex):
      return self.items[self.getParentIndex(childIndex)][0]
        
    def swap(self, indexOne, indexTwo):
        temp = self.items[indexOne]
        self.items[indexOne] = self.items[indexTwo]
        self.items[indexTwo] = temp
        
    def peek(self):  
        if self.size == 0:
            return -1
        return self.items[0]
        
    def poll(self):
        if self.size == 0:
            return -1
        item = self.items[0]
        self.items[0] = self.items[self.size - 1]
        self.items.pop()
        self.size -= 1
        self.heapifyDown()
        return item
        
    def insert(self, cnt, a):
        self.size += 1
        self.items.append([cnt, a])
        self.heapifyUp()
        
    def heapifyUp(self):
        index = self.size - 1
        while (self.hasParent(index) and self.parent(index) > self.items[index][0]):
            self.swap(self.getParentIndex(index), index)
            index = self.getParentIndex(index)
            
    def heapifyDown(self):
        index = 0
        while self.hasLeftChild(index):
            smallerIndex = self.getLeftChildIndex(index)
        
            if self.hasRightChild(index) and self.rightChild(index) < self.leftChild(index):
                smallerIndex =  self.getRightChildIndex(index)
            
            if self.items[index][0] > self.items[smallerIndex][0]:
                self.swap(index, smallerIndex)
                index = smallerIndex
            else:
                break

obj = Heap()
count = 0
def push(data):
  global count
  obj.insert(count,data)
  count += 1
  
def pop():
  obj.poll()

def top():
  print("Top element is:",obj.peek())

def isEmpty():
  return obj.size <= 0

def show():
  print(obj.items)
        
push(10)
push(15)
push(2)
push(17)
push(5)
show()
top()
pop()
pop()
show()
print(isEmpty())

        
